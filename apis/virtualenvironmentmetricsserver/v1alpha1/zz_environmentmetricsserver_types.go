// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnvironmentMetricsServerInitParameters struct {

	// Set this to `true` to disable this metric server.
	Disable *bool `json:"disable,omitempty" tf:"disable,omitempty"`

	// Root graphite path (ex: `proxmox.mycluster.mykey`).
	GraphitePath *string `json:"graphitePath,omitempty" tf:"graphite_path,omitempty"`

	// Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
	GraphiteProto *string `json:"graphiteProto,omitempty" tf:"graphite_proto,omitempty"`

	// An API path prefix inserted between `<host>:<port>/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
	InfluxAPIPathPrefix *string `json:"influxApiPathPrefix,omitempty" tf:"influx_api_path_prefix,omitempty"`

	// The InfluxDB bucket/db. Only necessary when using the http v2 api.
	InfluxBucket *string `json:"influxBucket,omitempty" tf:"influx_bucket,omitempty"`

	// Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
	InfluxDBProto *string `json:"influxDbProto,omitempty" tf:"influx_db_proto,omitempty"`

	// InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
	InfluxMaxBodySize *float64 `json:"influxMaxBodySize,omitempty" tf:"influx_max_body_size,omitempty"`

	// The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
	InfluxOrganization *string `json:"influxOrganization,omitempty" tf:"influx_organization,omitempty"`

	// The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
	InfluxTokenSecretRef *v1.SecretKeySelector `json:"influxTokenSecretRef,omitempty" tf:"-"`

	// Set to `false` to disable certificate verification for https endpoints.
	InfluxVerify *bool `json:"influxVerify,omitempty" tf:"influx_verify,omitempty"`

	// MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// Unique name that will be ID of this metric server in PVE.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Server network port.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Server dns name or IP address.
	Server *string `json:"server,omitempty" tf:"server,omitempty"`

	// TCP socket timeout in seconds. If not set, PVE default is `1`.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Plugin type. Choice is between `graphite` | `influxdb`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type EnvironmentMetricsServerObservation struct {

	// Set this to `true` to disable this metric server.
	Disable *bool `json:"disable,omitempty" tf:"disable,omitempty"`

	// Root graphite path (ex: `proxmox.mycluster.mykey`).
	GraphitePath *string `json:"graphitePath,omitempty" tf:"graphite_path,omitempty"`

	// Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
	GraphiteProto *string `json:"graphiteProto,omitempty" tf:"graphite_proto,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// An API path prefix inserted between `<host>:<port>/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
	InfluxAPIPathPrefix *string `json:"influxApiPathPrefix,omitempty" tf:"influx_api_path_prefix,omitempty"`

	// The InfluxDB bucket/db. Only necessary when using the http v2 api.
	InfluxBucket *string `json:"influxBucket,omitempty" tf:"influx_bucket,omitempty"`

	// Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
	InfluxDBProto *string `json:"influxDbProto,omitempty" tf:"influx_db_proto,omitempty"`

	// InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
	InfluxMaxBodySize *float64 `json:"influxMaxBodySize,omitempty" tf:"influx_max_body_size,omitempty"`

	// The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
	InfluxOrganization *string `json:"influxOrganization,omitempty" tf:"influx_organization,omitempty"`

	// Set to `false` to disable certificate verification for https endpoints.
	InfluxVerify *bool `json:"influxVerify,omitempty" tf:"influx_verify,omitempty"`

	// MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// Unique name that will be ID of this metric server in PVE.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Server network port.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Server dns name or IP address.
	Server *string `json:"server,omitempty" tf:"server,omitempty"`

	// TCP socket timeout in seconds. If not set, PVE default is `1`.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Plugin type. Choice is between `graphite` | `influxdb`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type EnvironmentMetricsServerParameters struct {

	// Set this to `true` to disable this metric server.
	// +kubebuilder:validation:Optional
	Disable *bool `json:"disable,omitempty" tf:"disable,omitempty"`

	// Root graphite path (ex: `proxmox.mycluster.mykey`).
	// +kubebuilder:validation:Optional
	GraphitePath *string `json:"graphitePath,omitempty" tf:"graphite_path,omitempty"`

	// Protocol to send graphite data. Choice is between `udp` | `tcp`. If not set, PVE default is `udp`.
	// +kubebuilder:validation:Optional
	GraphiteProto *string `json:"graphiteProto,omitempty" tf:"graphite_proto,omitempty"`

	// An API path prefix inserted between `<host>:<port>/` and `/api2/`. Can be useful if the InfluxDB service runs behind a reverse proxy.
	// +kubebuilder:validation:Optional
	InfluxAPIPathPrefix *string `json:"influxApiPathPrefix,omitempty" tf:"influx_api_path_prefix,omitempty"`

	// The InfluxDB bucket/db. Only necessary when using the http v2 api.
	// +kubebuilder:validation:Optional
	InfluxBucket *string `json:"influxBucket,omitempty" tf:"influx_bucket,omitempty"`

	// Protocol for InfluxDB. Choice is between `udp` | `http` | `https`. If not set, PVE default is `udp`.
	// +kubebuilder:validation:Optional
	InfluxDBProto *string `json:"influxDbProto,omitempty" tf:"influx_db_proto,omitempty"`

	// InfluxDB max-body-size in bytes. Requests are batched up to this size. If not set, PVE default is `25000000`.
	// +kubebuilder:validation:Optional
	InfluxMaxBodySize *float64 `json:"influxMaxBodySize,omitempty" tf:"influx_max_body_size,omitempty"`

	// The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.
	// +kubebuilder:validation:Optional
	InfluxOrganization *string `json:"influxOrganization,omitempty" tf:"influx_organization,omitempty"`

	// The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use `user:password` instead.
	// +kubebuilder:validation:Optional
	InfluxTokenSecretRef *v1.SecretKeySelector `json:"influxTokenSecretRef,omitempty" tf:"-"`

	// Set to `false` to disable certificate verification for https endpoints.
	// +kubebuilder:validation:Optional
	InfluxVerify *bool `json:"influxVerify,omitempty" tf:"influx_verify,omitempty"`

	// MTU (maximum transmission unit) for metrics transmission over UDP. If not set, PVE default is `1500` (allowed `512` - `65536`).
	// +kubebuilder:validation:Optional
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// Unique name that will be ID of this metric server in PVE.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Server network port.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Server dns name or IP address.
	// +kubebuilder:validation:Optional
	Server *string `json:"server,omitempty" tf:"server,omitempty"`

	// TCP socket timeout in seconds. If not set, PVE default is `1`.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Plugin type. Choice is between `graphite` | `influxdb`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// EnvironmentMetricsServerSpec defines the desired state of EnvironmentMetricsServer
type EnvironmentMetricsServerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvironmentMetricsServerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnvironmentMetricsServerInitParameters `json:"initProvider,omitempty"`
}

// EnvironmentMetricsServerStatus defines the observed state of EnvironmentMetricsServer.
type EnvironmentMetricsServerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvironmentMetricsServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnvironmentMetricsServer is the Schema for the EnvironmentMetricsServers API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,proxmoxbpg}
type EnvironmentMetricsServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.port) || (has(self.initProvider) && has(self.initProvider.port))",message="spec.forProvider.port is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.server) || (has(self.initProvider) && has(self.initProvider.server))",message="spec.forProvider.server is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   EnvironmentMetricsServerSpec   `json:"spec"`
	Status EnvironmentMetricsServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentMetricsServerList contains a list of EnvironmentMetricsServers
type EnvironmentMetricsServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvironmentMetricsServer `json:"items"`
}

// Repository type metadata.
var (
	EnvironmentMetricsServer_Kind             = "EnvironmentMetricsServer"
	EnvironmentMetricsServer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvironmentMetricsServer_Kind}.String()
	EnvironmentMetricsServer_KindAPIVersion   = EnvironmentMetricsServer_Kind + "." + CRDGroupVersion.String()
	EnvironmentMetricsServer_GroupVersionKind = CRDGroupVersion.WithKind(EnvironmentMetricsServer_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvironmentMetricsServer{}, &EnvironmentMetricsServerList{})
}
