// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CPUInitParameters struct {

	// The CPU architecture
	Architecture *string `json:"architecture,omitempty" tf:"architecture,omitempty"`

	// The number of CPU cores
	Cores *float64 `json:"cores,omitempty" tf:"cores,omitempty"`

	// The CPU units
	Units *float64 `json:"units,omitempty" tf:"units,omitempty"`
}

type CPUObservation struct {

	// The CPU architecture
	Architecture *string `json:"architecture,omitempty" tf:"architecture,omitempty"`

	// The number of CPU cores
	Cores *float64 `json:"cores,omitempty" tf:"cores,omitempty"`

	// The CPU units
	Units *float64 `json:"units,omitempty" tf:"units,omitempty"`
}

type CPUParameters struct {

	// The CPU architecture
	// +kubebuilder:validation:Optional
	Architecture *string `json:"architecture,omitempty" tf:"architecture,omitempty"`

	// The number of CPU cores
	// +kubebuilder:validation:Optional
	Cores *float64 `json:"cores,omitempty" tf:"cores,omitempty"`

	// The CPU units
	// +kubebuilder:validation:Optional
	Units *float64 `json:"units,omitempty" tf:"units,omitempty"`
}

type CloneInitParameters struct {

	// The ID of the target datastore
	DatastoreID *string `json:"datastoreId,omitempty" tf:"datastore_id,omitempty"`

	// The name of the source node
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// The ID of the source container
	VMID *float64 `json:"vmId,omitempty" tf:"vm_id,omitempty"`
}

type CloneObservation struct {

	// The ID of the target datastore
	DatastoreID *string `json:"datastoreId,omitempty" tf:"datastore_id,omitempty"`

	// The name of the source node
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// The ID of the source container
	VMID *float64 `json:"vmId,omitempty" tf:"vm_id,omitempty"`
}

type CloneParameters struct {

	// The ID of the target datastore
	// +kubebuilder:validation:Optional
	DatastoreID *string `json:"datastoreId,omitempty" tf:"datastore_id,omitempty"`

	// The name of the source node
	// +kubebuilder:validation:Optional
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// The ID of the source container
	// +kubebuilder:validation:Optional
	VMID *float64 `json:"vmId" tf:"vm_id,omitempty"`
}

type ConsoleInitParameters struct {

	// Whether to enable the console device
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The number of available TTY
	TtyCount *float64 `json:"ttyCount,omitempty" tf:"tty_count,omitempty"`

	// The console mode
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ConsoleObservation struct {

	// Whether to enable the console device
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The number of available TTY
	TtyCount *float64 `json:"ttyCount,omitempty" tf:"tty_count,omitempty"`

	// The console mode
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ConsoleParameters struct {

	// Whether to enable the console device
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The number of available TTY
	// +kubebuilder:validation:Optional
	TtyCount *float64 `json:"ttyCount,omitempty" tf:"tty_count,omitempty"`

	// The console mode
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DNSInitParameters struct {

	// The DNS search domain
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// The DNS server
	Server *string `json:"server,omitempty" tf:"server,omitempty"`

	// The list of DNS servers
	Servers []*string `json:"servers,omitempty" tf:"servers,omitempty"`
}

type DNSObservation struct {

	// The DNS search domain
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// The DNS server
	Server *string `json:"server,omitempty" tf:"server,omitempty"`

	// The list of DNS servers
	Servers []*string `json:"servers,omitempty" tf:"servers,omitempty"`
}

type DNSParameters struct {

	// The DNS search domain
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// The DNS server
	// +kubebuilder:validation:Optional
	Server *string `json:"server,omitempty" tf:"server,omitempty"`

	// The list of DNS servers
	// +kubebuilder:validation:Optional
	Servers []*string `json:"servers,omitempty" tf:"servers,omitempty"`
}

type DevicePassthroughInitParameters struct {

	// Deny the container to write to the device
	DenyWrite *bool `json:"denyWrite,omitempty" tf:"deny_write,omitempty"`

	// Group ID to be assigned to the device node
	GID *float64 `json:"gid,omitempty" tf:"gid,omitempty"`

	// Access mode to be set on the device node (e.g. 0666)
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Device to pass through to the container
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Device UID in the container
	UID *float64 `json:"uid,omitempty" tf:"uid,omitempty"`
}

type DevicePassthroughObservation struct {

	// Deny the container to write to the device
	DenyWrite *bool `json:"denyWrite,omitempty" tf:"deny_write,omitempty"`

	// Group ID to be assigned to the device node
	GID *float64 `json:"gid,omitempty" tf:"gid,omitempty"`

	// Access mode to be set on the device node (e.g. 0666)
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Device to pass through to the container
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Device UID in the container
	UID *float64 `json:"uid,omitempty" tf:"uid,omitempty"`
}

type DevicePassthroughParameters struct {

	// Deny the container to write to the device
	// +kubebuilder:validation:Optional
	DenyWrite *bool `json:"denyWrite,omitempty" tf:"deny_write,omitempty"`

	// Group ID to be assigned to the device node
	// +kubebuilder:validation:Optional
	GID *float64 `json:"gid,omitempty" tf:"gid,omitempty"`

	// Access mode to be set on the device node (e.g. 0666)
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Device to pass through to the container
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`

	// Device UID in the container
	// +kubebuilder:validation:Optional
	UID *float64 `json:"uid,omitempty" tf:"uid,omitempty"`
}

type DiskInitParameters struct {

	// The datastore id
	DatastoreID *string `json:"datastoreId,omitempty" tf:"datastore_id,omitempty"`

	// The rootfs size in gigabytes
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type DiskObservation struct {

	// The datastore id
	DatastoreID *string `json:"datastoreId,omitempty" tf:"datastore_id,omitempty"`

	// The rootfs size in gigabytes
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type DiskParameters struct {

	// The datastore id
	// +kubebuilder:validation:Optional
	DatastoreID *string `json:"datastoreId,omitempty" tf:"datastore_id,omitempty"`

	// The rootfs size in gigabytes
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type EnvironmentContainerInitParameters struct {

	// The CPU allocation
	CPU []CPUInitParameters `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// The cloning configuration
	Clone []CloneInitParameters `json:"clone,omitempty" tf:"clone,omitempty"`

	// The console configuration
	Console []ConsoleInitParameters `json:"console,omitempty" tf:"console,omitempty"`

	// The description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Device to pass through to the container
	DevicePassthrough []DevicePassthroughInitParameters `json:"devicePassthrough,omitempty" tf:"device_passthrough,omitempty"`

	// The disks
	Disk []DiskInitParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// Features
	Features []FeaturesInitParameters `json:"features,omitempty" tf:"features,omitempty"`

	// A hook script
	HookScriptFileID *string `json:"hookScriptFileId,omitempty" tf:"hook_script_file_id,omitempty"`

	// The initialization configuration
	Initialization []InitializationInitParameters `json:"initialization,omitempty" tf:"initialization,omitempty"`

	// The memory allocation
	Memory []MemoryInitParameters `json:"memory,omitempty" tf:"memory,omitempty"`

	// A mount point
	MountPoint []MountPointInitParameters `json:"mountPoint,omitempty" tf:"mount_point,omitempty"`

	// The network interfaces
	NetworkInterface []NetworkInterfaceInitParameters `json:"networkInterface,omitempty" tf:"network_interface,omitempty"`

	// The node name
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// The operating system configuration
	OperatingSystem []OperatingSystemInitParameters `json:"operatingSystem,omitempty" tf:"operating_system,omitempty"`

	// The ID of the pool to assign the container to
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// Whether to set the protection flag of the container. This will prevent the container itself and its disk for remove/update operations.
	Protection *bool `json:"protection,omitempty" tf:"protection,omitempty"`

	// Automatically start container when the host system boots.
	StartOnBoot *bool `json:"startOnBoot,omitempty" tf:"start_on_boot,omitempty"`

	// Whether to start the container
	Started *bool `json:"started,omitempty" tf:"started,omitempty"`

	// Defines startup and shutdown behavior of the container
	Startup []StartupInitParameters `json:"startup,omitempty" tf:"startup,omitempty"`

	// Tags of the container. This is only meta information.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Whether to create a template
	Template *bool `json:"template,omitempty" tf:"template,omitempty"`

	// Clone container timeout
	TimeoutClone *float64 `json:"timeoutClone,omitempty" tf:"timeout_clone,omitempty"`

	// Create container timeout
	TimeoutCreate *float64 `json:"timeoutCreate,omitempty" tf:"timeout_create,omitempty"`

	// Delete container timeout
	TimeoutDelete *float64 `json:"timeoutDelete,omitempty" tf:"timeout_delete,omitempty"`

	// Start container timeout
	TimeoutStart *float64 `json:"timeoutStart,omitempty" tf:"timeout_start,omitempty"`

	// Update container timeout
	TimeoutUpdate *float64 `json:"timeoutUpdate,omitempty" tf:"timeout_update,omitempty"`

	// Whether the container runs as unprivileged on the host
	Unprivileged *bool `json:"unprivileged,omitempty" tf:"unprivileged,omitempty"`

	// The VM identifier
	VMID *float64 `json:"vmId,omitempty" tf:"vm_id,omitempty"`
}

type EnvironmentContainerObservation struct {

	// The CPU allocation
	CPU []CPUObservation `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// The cloning configuration
	Clone []CloneObservation `json:"clone,omitempty" tf:"clone,omitempty"`

	// The console configuration
	Console []ConsoleObservation `json:"console,omitempty" tf:"console,omitempty"`

	// The description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Device to pass through to the container
	DevicePassthrough []DevicePassthroughObservation `json:"devicePassthrough,omitempty" tf:"device_passthrough,omitempty"`

	// The disks
	Disk []DiskObservation `json:"disk,omitempty" tf:"disk,omitempty"`

	// Features
	Features []FeaturesObservation `json:"features,omitempty" tf:"features,omitempty"`

	// A hook script
	HookScriptFileID *string `json:"hookScriptFileId,omitempty" tf:"hook_script_file_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The initialization configuration
	Initialization []InitializationObservation `json:"initialization,omitempty" tf:"initialization,omitempty"`

	// The memory allocation
	Memory []MemoryObservation `json:"memory,omitempty" tf:"memory,omitempty"`

	// A mount point
	MountPoint []MountPointObservation `json:"mountPoint,omitempty" tf:"mount_point,omitempty"`

	// The network interfaces
	NetworkInterface []NetworkInterfaceObservation `json:"networkInterface,omitempty" tf:"network_interface,omitempty"`

	// The node name
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// The operating system configuration
	OperatingSystem []OperatingSystemObservation `json:"operatingSystem,omitempty" tf:"operating_system,omitempty"`

	// The ID of the pool to assign the container to
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// Whether to set the protection flag of the container. This will prevent the container itself and its disk for remove/update operations.
	Protection *bool `json:"protection,omitempty" tf:"protection,omitempty"`

	// Automatically start container when the host system boots.
	StartOnBoot *bool `json:"startOnBoot,omitempty" tf:"start_on_boot,omitempty"`

	// Whether to start the container
	Started *bool `json:"started,omitempty" tf:"started,omitempty"`

	// Defines startup and shutdown behavior of the container
	Startup []StartupObservation `json:"startup,omitempty" tf:"startup,omitempty"`

	// Tags of the container. This is only meta information.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Whether to create a template
	Template *bool `json:"template,omitempty" tf:"template,omitempty"`

	// Clone container timeout
	TimeoutClone *float64 `json:"timeoutClone,omitempty" tf:"timeout_clone,omitempty"`

	// Create container timeout
	TimeoutCreate *float64 `json:"timeoutCreate,omitempty" tf:"timeout_create,omitempty"`

	// Delete container timeout
	TimeoutDelete *float64 `json:"timeoutDelete,omitempty" tf:"timeout_delete,omitempty"`

	// Start container timeout
	TimeoutStart *float64 `json:"timeoutStart,omitempty" tf:"timeout_start,omitempty"`

	// Update container timeout
	TimeoutUpdate *float64 `json:"timeoutUpdate,omitempty" tf:"timeout_update,omitempty"`

	// Whether the container runs as unprivileged on the host
	Unprivileged *bool `json:"unprivileged,omitempty" tf:"unprivileged,omitempty"`

	// The VM identifier
	VMID *float64 `json:"vmId,omitempty" tf:"vm_id,omitempty"`
}

type EnvironmentContainerParameters struct {

	// The CPU allocation
	// +kubebuilder:validation:Optional
	CPU []CPUParameters `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// The cloning configuration
	// +kubebuilder:validation:Optional
	Clone []CloneParameters `json:"clone,omitempty" tf:"clone,omitempty"`

	// The console configuration
	// +kubebuilder:validation:Optional
	Console []ConsoleParameters `json:"console,omitempty" tf:"console,omitempty"`

	// The description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Device to pass through to the container
	// +kubebuilder:validation:Optional
	DevicePassthrough []DevicePassthroughParameters `json:"devicePassthrough,omitempty" tf:"device_passthrough,omitempty"`

	// The disks
	// +kubebuilder:validation:Optional
	Disk []DiskParameters `json:"disk,omitempty" tf:"disk,omitempty"`

	// Features
	// +kubebuilder:validation:Optional
	Features []FeaturesParameters `json:"features,omitempty" tf:"features,omitempty"`

	// A hook script
	// +kubebuilder:validation:Optional
	HookScriptFileID *string `json:"hookScriptFileId,omitempty" tf:"hook_script_file_id,omitempty"`

	// The initialization configuration
	// +kubebuilder:validation:Optional
	Initialization []InitializationParameters `json:"initialization,omitempty" tf:"initialization,omitempty"`

	// The memory allocation
	// +kubebuilder:validation:Optional
	Memory []MemoryParameters `json:"memory,omitempty" tf:"memory,omitempty"`

	// A mount point
	// +kubebuilder:validation:Optional
	MountPoint []MountPointParameters `json:"mountPoint,omitempty" tf:"mount_point,omitempty"`

	// The network interfaces
	// +kubebuilder:validation:Optional
	NetworkInterface []NetworkInterfaceParameters `json:"networkInterface,omitempty" tf:"network_interface,omitempty"`

	// The node name
	// +kubebuilder:validation:Optional
	NodeName *string `json:"nodeName,omitempty" tf:"node_name,omitempty"`

	// The operating system configuration
	// +kubebuilder:validation:Optional
	OperatingSystem []OperatingSystemParameters `json:"operatingSystem,omitempty" tf:"operating_system,omitempty"`

	// The ID of the pool to assign the container to
	// +kubebuilder:validation:Optional
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// Whether to set the protection flag of the container. This will prevent the container itself and its disk for remove/update operations.
	// +kubebuilder:validation:Optional
	Protection *bool `json:"protection,omitempty" tf:"protection,omitempty"`

	// Automatically start container when the host system boots.
	// +kubebuilder:validation:Optional
	StartOnBoot *bool `json:"startOnBoot,omitempty" tf:"start_on_boot,omitempty"`

	// Whether to start the container
	// +kubebuilder:validation:Optional
	Started *bool `json:"started,omitempty" tf:"started,omitempty"`

	// Defines startup and shutdown behavior of the container
	// +kubebuilder:validation:Optional
	Startup []StartupParameters `json:"startup,omitempty" tf:"startup,omitempty"`

	// Tags of the container. This is only meta information.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Whether to create a template
	// +kubebuilder:validation:Optional
	Template *bool `json:"template,omitempty" tf:"template,omitempty"`

	// Clone container timeout
	// +kubebuilder:validation:Optional
	TimeoutClone *float64 `json:"timeoutClone,omitempty" tf:"timeout_clone,omitempty"`

	// Create container timeout
	// +kubebuilder:validation:Optional
	TimeoutCreate *float64 `json:"timeoutCreate,omitempty" tf:"timeout_create,omitempty"`

	// Delete container timeout
	// +kubebuilder:validation:Optional
	TimeoutDelete *float64 `json:"timeoutDelete,omitempty" tf:"timeout_delete,omitempty"`

	// Start container timeout
	// +kubebuilder:validation:Optional
	TimeoutStart *float64 `json:"timeoutStart,omitempty" tf:"timeout_start,omitempty"`

	// Update container timeout
	// +kubebuilder:validation:Optional
	TimeoutUpdate *float64 `json:"timeoutUpdate,omitempty" tf:"timeout_update,omitempty"`

	// Whether the container runs as unprivileged on the host
	// +kubebuilder:validation:Optional
	Unprivileged *bool `json:"unprivileged,omitempty" tf:"unprivileged,omitempty"`

	// The VM identifier
	// +kubebuilder:validation:Optional
	VMID *float64 `json:"vmId,omitempty" tf:"vm_id,omitempty"`
}

type FeaturesInitParameters struct {

	// Whether the container supports FUSE mounts
	Fuse *bool `json:"fuse,omitempty" tf:"fuse,omitempty"`

	// Whether the container supports `keyctl()` system call
	Keyctl *bool `json:"keyctl,omitempty" tf:"keyctl,omitempty"`

	// List of allowed mount types
	Mount []*string `json:"mount,omitempty" tf:"mount,omitempty"`

	// Whether the container runs as nested
	Nesting *bool `json:"nesting,omitempty" tf:"nesting,omitempty"`
}

type FeaturesObservation struct {

	// Whether the container supports FUSE mounts
	Fuse *bool `json:"fuse,omitempty" tf:"fuse,omitempty"`

	// Whether the container supports `keyctl()` system call
	Keyctl *bool `json:"keyctl,omitempty" tf:"keyctl,omitempty"`

	// List of allowed mount types
	Mount []*string `json:"mount,omitempty" tf:"mount,omitempty"`

	// Whether the container runs as nested
	Nesting *bool `json:"nesting,omitempty" tf:"nesting,omitempty"`
}

type FeaturesParameters struct {

	// Whether the container supports FUSE mounts
	// +kubebuilder:validation:Optional
	Fuse *bool `json:"fuse,omitempty" tf:"fuse,omitempty"`

	// Whether the container supports `keyctl()` system call
	// +kubebuilder:validation:Optional
	Keyctl *bool `json:"keyctl,omitempty" tf:"keyctl,omitempty"`

	// List of allowed mount types
	// +kubebuilder:validation:Optional
	Mount []*string `json:"mount,omitempty" tf:"mount,omitempty"`

	// Whether the container runs as nested
	// +kubebuilder:validation:Optional
	Nesting *bool `json:"nesting,omitempty" tf:"nesting,omitempty"`
}

type IPConfigInitParameters struct {

	// The IPv4 configuration
	IPv4 []IPv4InitParameters `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// The IPv6 configuration
	IPv6 []IPv6InitParameters `json:"ipv6,omitempty" tf:"ipv6,omitempty"`
}

type IPConfigObservation struct {

	// The IPv4 configuration
	IPv4 []IPv4Observation `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// The IPv6 configuration
	IPv6 []IPv6Observation `json:"ipv6,omitempty" tf:"ipv6,omitempty"`
}

type IPConfigParameters struct {

	// The IPv4 configuration
	// +kubebuilder:validation:Optional
	IPv4 []IPv4Parameters `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// The IPv6 configuration
	// +kubebuilder:validation:Optional
	IPv6 []IPv6Parameters `json:"ipv6,omitempty" tf:"ipv6,omitempty"`
}

type IPv4InitParameters struct {

	// The IPv4 address
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// The IPv4 gateway
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`
}

type IPv4Observation struct {

	// The IPv4 address
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// The IPv4 gateway
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`
}

type IPv4Parameters struct {

	// The IPv4 address
	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// The IPv4 gateway
	// +kubebuilder:validation:Optional
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`
}

type IPv6InitParameters struct {

	// The IPv6 address
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// The IPv6 gateway
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`
}

type IPv6Observation struct {

	// The IPv6 address
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// The IPv6 gateway
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`
}

type IPv6Parameters struct {

	// The IPv6 address
	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// The IPv6 gateway
	// +kubebuilder:validation:Optional
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`
}

type InitializationInitParameters struct {

	// The DNS configuration
	DNS []DNSInitParameters `json:"dns,omitempty" tf:"dns,omitempty"`

	// The hostname
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The IP configuration
	IPConfig []IPConfigInitParameters `json:"ipConfig,omitempty" tf:"ip_config,omitempty"`

	// The user account configuration
	UserAccount []UserAccountInitParameters `json:"userAccount,omitempty" tf:"user_account,omitempty"`
}

type InitializationObservation struct {

	// The DNS configuration
	DNS []DNSObservation `json:"dns,omitempty" tf:"dns,omitempty"`

	// The hostname
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The IP configuration
	IPConfig []IPConfigObservation `json:"ipConfig,omitempty" tf:"ip_config,omitempty"`

	// The user account configuration
	UserAccount []UserAccountObservation `json:"userAccount,omitempty" tf:"user_account,omitempty"`
}

type InitializationParameters struct {

	// The DNS configuration
	// +kubebuilder:validation:Optional
	DNS []DNSParameters `json:"dns,omitempty" tf:"dns,omitempty"`

	// The hostname
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The IP configuration
	// +kubebuilder:validation:Optional
	IPConfig []IPConfigParameters `json:"ipConfig,omitempty" tf:"ip_config,omitempty"`

	// The user account configuration
	// +kubebuilder:validation:Optional
	UserAccount []UserAccountParameters `json:"userAccount,omitempty" tf:"user_account,omitempty"`
}

type MemoryInitParameters struct {

	// The dedicated memory in megabytes
	Dedicated *float64 `json:"dedicated,omitempty" tf:"dedicated,omitempty"`

	// The swap size in megabytes
	Swap *float64 `json:"swap,omitempty" tf:"swap,omitempty"`
}

type MemoryObservation struct {

	// The dedicated memory in megabytes
	Dedicated *float64 `json:"dedicated,omitempty" tf:"dedicated,omitempty"`

	// The swap size in megabytes
	Swap *float64 `json:"swap,omitempty" tf:"swap,omitempty"`
}

type MemoryParameters struct {

	// The dedicated memory in megabytes
	// +kubebuilder:validation:Optional
	Dedicated *float64 `json:"dedicated,omitempty" tf:"dedicated,omitempty"`

	// The swap size in megabytes
	// +kubebuilder:validation:Optional
	Swap *float64 `json:"swap,omitempty" tf:"swap,omitempty"`
}

type MountPointInitParameters struct {

	// Explicitly enable or disable ACL support
	ACL *bool `json:"acl,omitempty" tf:"acl,omitempty"`

	// Whether to include the mount point in backups (only used for volume mount points)
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// Extra mount options.
	MountOptions []*string `json:"mountOptions,omitempty" tf:"mount_options,omitempty"`

	// Path to the mount point as seen from inside the container
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Enable user quotas inside the container (not supported with volume mounts)
	Quota *bool `json:"quota,omitempty" tf:"quota,omitempty"`

	// Read-only mount point
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`

	// Will include this volume to a storage replica job
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// Mark this non-volume mount point as available on all nodes
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// Volume size (only used for volume mount points)
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// Volume, device or directory to mount into the container
	Volume *string `json:"volume,omitempty" tf:"volume,omitempty"`
}

type MountPointObservation struct {

	// Explicitly enable or disable ACL support
	ACL *bool `json:"acl,omitempty" tf:"acl,omitempty"`

	// Whether to include the mount point in backups (only used for volume mount points)
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// Extra mount options.
	MountOptions []*string `json:"mountOptions,omitempty" tf:"mount_options,omitempty"`

	// Path to the mount point as seen from inside the container
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Enable user quotas inside the container (not supported with volume mounts)
	Quota *bool `json:"quota,omitempty" tf:"quota,omitempty"`

	// Read-only mount point
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`

	// Will include this volume to a storage replica job
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// Mark this non-volume mount point as available on all nodes
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// Volume size (only used for volume mount points)
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// Volume, device or directory to mount into the container
	Volume *string `json:"volume,omitempty" tf:"volume,omitempty"`
}

type MountPointParameters struct {

	// Explicitly enable or disable ACL support
	// +kubebuilder:validation:Optional
	ACL *bool `json:"acl,omitempty" tf:"acl,omitempty"`

	// Whether to include the mount point in backups (only used for volume mount points)
	// +kubebuilder:validation:Optional
	Backup *bool `json:"backup,omitempty" tf:"backup,omitempty"`

	// Extra mount options.
	// +kubebuilder:validation:Optional
	MountOptions []*string `json:"mountOptions,omitempty" tf:"mount_options,omitempty"`

	// Path to the mount point as seen from inside the container
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`

	// Enable user quotas inside the container (not supported with volume mounts)
	// +kubebuilder:validation:Optional
	Quota *bool `json:"quota,omitempty" tf:"quota,omitempty"`

	// Read-only mount point
	// +kubebuilder:validation:Optional
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`

	// Will include this volume to a storage replica job
	// +kubebuilder:validation:Optional
	Replicate *bool `json:"replicate,omitempty" tf:"replicate,omitempty"`

	// Mark this non-volume mount point as available on all nodes
	// +kubebuilder:validation:Optional
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// Volume size (only used for volume mount points)
	// +kubebuilder:validation:Optional
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// Volume, device or directory to mount into the container
	// +kubebuilder:validation:Optional
	Volume *string `json:"volume" tf:"volume,omitempty"`
}

type NetworkInterfaceInitParameters struct {

	// The bridge
	Bridge *string `json:"bridge,omitempty" tf:"bridge,omitempty"`

	// Whether to enable the network device
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Whether this interface's firewall rules should be used.
	Firewall *bool `json:"firewall,omitempty" tf:"firewall,omitempty"`

	// The MAC address
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// Maximum transmission unit (MTU)
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// The network interface name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The rate limit in megabytes per second
	RateLimit *float64 `json:"rateLimit,omitempty" tf:"rate_limit,omitempty"`

	// The VLAN identifier
	VlanID *float64 `json:"vlanId,omitempty" tf:"vlan_id,omitempty"`
}

type NetworkInterfaceObservation struct {

	// The bridge
	Bridge *string `json:"bridge,omitempty" tf:"bridge,omitempty"`

	// Whether to enable the network device
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Whether this interface's firewall rules should be used.
	Firewall *bool `json:"firewall,omitempty" tf:"firewall,omitempty"`

	// The MAC address
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// Maximum transmission unit (MTU)
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// The network interface name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The rate limit in megabytes per second
	RateLimit *float64 `json:"rateLimit,omitempty" tf:"rate_limit,omitempty"`

	// The VLAN identifier
	VlanID *float64 `json:"vlanId,omitempty" tf:"vlan_id,omitempty"`
}

type NetworkInterfaceParameters struct {

	// The bridge
	// +kubebuilder:validation:Optional
	Bridge *string `json:"bridge,omitempty" tf:"bridge,omitempty"`

	// Whether to enable the network device
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Whether this interface's firewall rules should be used.
	// +kubebuilder:validation:Optional
	Firewall *bool `json:"firewall,omitempty" tf:"firewall,omitempty"`

	// The MAC address
	// +kubebuilder:validation:Optional
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// Maximum transmission unit (MTU)
	// +kubebuilder:validation:Optional
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// The network interface name
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The rate limit in megabytes per second
	// +kubebuilder:validation:Optional
	RateLimit *float64 `json:"rateLimit,omitempty" tf:"rate_limit,omitempty"`

	// The VLAN identifier
	// +kubebuilder:validation:Optional
	VlanID *float64 `json:"vlanId,omitempty" tf:"vlan_id,omitempty"`
}

type OperatingSystemInitParameters struct {

	// The ID of an OS template file
	TemplateFileID *string `json:"templateFileId,omitempty" tf:"template_file_id,omitempty"`

	// The type
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type OperatingSystemObservation struct {

	// The ID of an OS template file
	TemplateFileID *string `json:"templateFileId,omitempty" tf:"template_file_id,omitempty"`

	// The type
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type OperatingSystemParameters struct {

	// The ID of an OS template file
	// +kubebuilder:validation:Optional
	TemplateFileID *string `json:"templateFileId" tf:"template_file_id,omitempty"`

	// The type
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StartupInitParameters struct {

	// A non-negative number defining the delay in seconds before the next container is shut down
	DownDelay *float64 `json:"downDelay,omitempty" tf:"down_delay,omitempty"`

	// A non-negative number defining the general startup order
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// A non-negative number defining the delay in seconds before the next container is started
	UpDelay *float64 `json:"upDelay,omitempty" tf:"up_delay,omitempty"`
}

type StartupObservation struct {

	// A non-negative number defining the delay in seconds before the next container is shut down
	DownDelay *float64 `json:"downDelay,omitempty" tf:"down_delay,omitempty"`

	// A non-negative number defining the general startup order
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// A non-negative number defining the delay in seconds before the next container is started
	UpDelay *float64 `json:"upDelay,omitempty" tf:"up_delay,omitempty"`
}

type StartupParameters struct {

	// A non-negative number defining the delay in seconds before the next container is shut down
	// +kubebuilder:validation:Optional
	DownDelay *float64 `json:"downDelay,omitempty" tf:"down_delay,omitempty"`

	// A non-negative number defining the general startup order
	// +kubebuilder:validation:Optional
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`

	// A non-negative number defining the delay in seconds before the next container is started
	// +kubebuilder:validation:Optional
	UpDelay *float64 `json:"upDelay,omitempty" tf:"up_delay,omitempty"`
}

type UserAccountInitParameters struct {

	// The SSH keys
	Keys []*string `json:"keys,omitempty" tf:"keys,omitempty"`

	// The SSH password
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`
}

type UserAccountObservation struct {

	// The SSH keys
	Keys []*string `json:"keys,omitempty" tf:"keys,omitempty"`
}

type UserAccountParameters struct {

	// The SSH keys
	// +kubebuilder:validation:Optional
	Keys []*string `json:"keys,omitempty" tf:"keys,omitempty"`

	// The SSH password
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`
}

// EnvironmentContainerSpec defines the desired state of EnvironmentContainer
type EnvironmentContainerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvironmentContainerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EnvironmentContainerInitParameters `json:"initProvider,omitempty"`
}

// EnvironmentContainerStatus defines the observed state of EnvironmentContainer.
type EnvironmentContainerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvironmentContainerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EnvironmentContainer is the Schema for the EnvironmentContainers API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,proxmoxbpg}
type EnvironmentContainer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeName) || (has(self.initProvider) && has(self.initProvider.nodeName))",message="spec.forProvider.nodeName is a required parameter"
	Spec   EnvironmentContainerSpec   `json:"spec"`
	Status EnvironmentContainerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentContainerList contains a list of EnvironmentContainers
type EnvironmentContainerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvironmentContainer `json:"items"`
}

// Repository type metadata.
var (
	EnvironmentContainer_Kind             = "EnvironmentContainer"
	EnvironmentContainer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvironmentContainer_Kind}.String()
	EnvironmentContainer_KindAPIVersion   = EnvironmentContainer_Kind + "." + CRDGroupVersion.String()
	EnvironmentContainer_GroupVersionKind = CRDGroupVersion.WithKind(EnvironmentContainer_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvironmentContainer{}, &EnvironmentContainerList{})
}
